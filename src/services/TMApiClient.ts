//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from "axios";

export module TMApiClient {
  export class UserClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
      this.instance = instance ? instance : axios.create();

      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 根据id获取用户信息
     */
    getById(id: number, cancelToken?: CancelToken | undefined): Promise<GetUserModel> {
      let url_ = this.baseUrl + "/api/User/{id}";
      if (id === undefined || id === null) throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: AxiosRequestConfig = {
        method: "GET",
        url: url_,
        headers: {
          Accept: "application/json",
        },
        cancelToken,
      };

      return this.instance
        .request(options_)
        .catch((_error: any) => {
          if (isAxiosError(_error) && _error.response) {
            return _error.response;
          } else {
            throw _error;
          }
        })
        .then((_response: AxiosResponse) => {
          return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<GetUserModel> {
      const status = response.status;
      let _headers: any = {};
      if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
          if (response.headers.hasOwnProperty(k)) {
            _headers[k] = response.headers[k];
          }
        }
      }
      if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = GetUserModel.fromJS(resultData200);
        return Promise.resolve<GetUserModel>(result200);
      } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }
      return Promise.resolve<GetUserModel>(null as any);
    }

    /**
     * 修改数据
     */
    update(id: number, model: EditUserModel, cancelToken?: CancelToken | undefined): Promise<number> {
      let url_ = this.baseUrl + "/api/User/{id}";
      if (id === undefined || id === null) throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(model);

      let options_: AxiosRequestConfig = {
        data: content_,
        method: "PUT",
        url: url_,
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        cancelToken,
      };

      return this.instance
        .request(options_)
        .catch((_error: any) => {
          if (isAxiosError(_error) && _error.response) {
            return _error.response;
          } else {
            throw _error;
          }
        })
        .then((_response: AxiosResponse) => {
          return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<number> {
      const status = response.status;
      let _headers: any = {};
      if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
          if (response.headers.hasOwnProperty(k)) {
            _headers[k] = response.headers[k];
          }
        }
      }
      if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = resultData200 !== undefined ? resultData200 : <any>null;

        return Promise.resolve<number>(result200);
      } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }
      return Promise.resolve<number>(null as any);
    }

    /**
     * 分页获取数据
     * @param limit (optional) 每页数量
     * @param page (optional) 页数
     */
    getPage(limit: number | undefined, page: number | undefined, cancelToken?: CancelToken | undefined): Promise<PaginationOfGetUserModel> {
      let url_ = this.baseUrl + "/api/User?";
      if (limit === null) throw new Error("The parameter 'limit' cannot be null.");
      else if (limit !== undefined) url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
      if (page === null) throw new Error("The parameter 'page' cannot be null.");
      else if (page !== undefined) url_ += "Page=" + encodeURIComponent("" + page) + "&";
      url_ = url_.replace(/[?&]$/, "");

      let options_: AxiosRequestConfig = {
        method: "GET",
        url: url_,
        headers: {
          Accept: "application/json",
        },
        cancelToken,
      };

      return this.instance
        .request(options_)
        .catch((_error: any) => {
          if (isAxiosError(_error) && _error.response) {
            return _error.response;
          } else {
            throw _error;
          }
        })
        .then((_response: AxiosResponse) => {
          return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<PaginationOfGetUserModel> {
      const status = response.status;
      let _headers: any = {};
      if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
          if (response.headers.hasOwnProperty(k)) {
            _headers[k] = response.headers[k];
          }
        }
      }
      if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = PaginationOfGetUserModel.fromJS(resultData200);
        return Promise.resolve<PaginationOfGetUserModel>(result200);
      } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }
      return Promise.resolve<PaginationOfGetUserModel>(null as any);
    }

    /**
     * 批量修改数据
     */
    updateAll(models: EditUserModel[], cancelToken?: CancelToken | undefined): Promise<void> {
      let url_ = this.baseUrl + "/api/User";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(models);

      let options_: AxiosRequestConfig = {
        data: content_,
        method: "POST",
        url: url_,
        headers: {
          "Content-Type": "application/json",
        },
        cancelToken,
      };

      return this.instance
        .request(options_)
        .catch((_error: any) => {
          if (isAxiosError(_error) && _error.response) {
            return _error.response;
          } else {
            throw _error;
          }
        })
        .then((_response: AxiosResponse) => {
          return this.processUpdateAll(_response);
        });
    }

    protected processUpdateAll(response: AxiosResponse): Promise<void> {
      const status = response.status;
      let _headers: any = {};
      if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
          if (response.headers.hasOwnProperty(k)) {
            _headers[k] = response.headers[k];
          }
        }
      }
      if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);
      } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }
      return Promise.resolve<void>(null as any);
    }
  }

  export class AuthenticationClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
      this.instance = instance ? instance : axios.create();

      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取token
     * @param userAccount (optional)
     * @param pwd (optional)
     */
    getToken(userAccount: string | null | undefined, pwd: string | null | undefined, cancelToken?: CancelToken | undefined): Promise<UserLoginModel> {
      let url_ = this.baseUrl + "/api/Authentication?";
      if (userAccount !== undefined && userAccount !== null) url_ += "userAccount=" + encodeURIComponent("" + userAccount) + "&";
      if (pwd !== undefined && pwd !== null) url_ += "pwd=" + encodeURIComponent("" + pwd) + "&";
      url_ = url_.replace(/[?&]$/, "");

      let options_: AxiosRequestConfig = {
        method: "POST",
        url: url_,
        headers: {
          Accept: "application/json",
        },
        cancelToken,
      };

      return this.instance
        .request(options_)
        .catch((_error: any) => {
          if (isAxiosError(_error) && _error.response) {
            return _error.response;
          } else {
            throw _error;
          }
        })
        .then((_response: AxiosResponse) => {
          return this.processGetToken(_response);
        });
    }

    protected processGetToken(response: AxiosResponse): Promise<UserLoginModel> {
      const status = response.status;
      let _headers: any = {};
      if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
          if (response.headers.hasOwnProperty(k)) {
            _headers[k] = response.headers[k];
          }
        }
      }
      if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = UserLoginModel.fromJS(resultData200);
        return Promise.resolve<UserLoginModel>(result200);
      } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }
      return Promise.resolve<UserLoginModel>(null as any);
    }
  }

  export class GetUserModel implements IGetUserModel {
    id!: number;
    userAccount!: string;
    userName!: string;
    password!: string;

    constructor(data?: IGetUserModel) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.id = _data["id"];
        this.userAccount = _data["userAccount"];
        this.userName = _data["userName"];
        this.password = _data["password"];
      }
    }

    static fromJS(data: any): GetUserModel {
      data = typeof data === "object" ? data : {};
      let result = new GetUserModel();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === "object" ? data : {};
      data["id"] = this.id;
      data["userAccount"] = this.userAccount;
      data["userName"] = this.userName;
      data["password"] = this.password;
      return data;
    }
  }

  export interface IGetUserModel {
    id: number;
    userAccount: string;
    userName: string;
    password: string;
  }

  export class PaginationOfGetUserModel implements IPaginationOfGetUserModel {
    /** 总数 */
    count!: number;
    /** 当前页数据 */
    items!: GetUserModel[];

    constructor(data?: IPaginationOfGetUserModel) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
        }
      }
      if (!data) {
        this.items = [];
      }
    }

    init(_data?: any) {
      if (_data) {
        this.count = _data["count"];
        if (Array.isArray(_data["items"])) {
          this.items = [] as any;
          for (let item of _data["items"]) this.items!.push(GetUserModel.fromJS(item));
        }
      }
    }

    static fromJS(data: any): PaginationOfGetUserModel {
      data = typeof data === "object" ? data : {};
      let result = new PaginationOfGetUserModel();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === "object" ? data : {};
      data["count"] = this.count;
      if (Array.isArray(this.items)) {
        data["items"] = [];
        for (let item of this.items) data["items"].push(item.toJSON());
      }
      return data;
    }
  }

  export interface IPaginationOfGetUserModel {
    /** 总数 */
    count: number;
    /** 当前页数据 */
    items: GetUserModel[];
  }

  export class EditUserModel implements IEditUserModel {
    id?: number;
    userName?: string | undefined;
    userAccount?: string | undefined;
    password?: string | undefined;

    constructor(data?: IEditUserModel) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.id = _data["id"];
        this.userName = _data["userName"];
        this.userAccount = _data["userAccount"];
        this.password = _data["password"];
      }
    }

    static fromJS(data: any): EditUserModel {
      data = typeof data === "object" ? data : {};
      let result = new EditUserModel();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === "object" ? data : {};
      data["id"] = this.id;
      data["userName"] = this.userName;
      data["userAccount"] = this.userAccount;
      data["password"] = this.password;
      return data;
    }
  }

  export interface IEditUserModel {
    id?: number;
    userName?: string | undefined;
    userAccount?: string | undefined;
    password?: string | undefined;
  }

  export class UserLoginModel implements IUserLoginModel {
    details!: string;
    loginResult!: number;
    token!: string;

    constructor(data?: IUserLoginModel) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.details = _data["details"];
        this.loginResult = _data["loginResult"];
        this.token = _data["token"];
      }
    }

    static fromJS(data: any): UserLoginModel {
      data = typeof data === "object" ? data : {};
      let result = new UserLoginModel();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === "object" ? data : {};
      data["details"] = this.details;
      data["loginResult"] = this.loginResult;
      data["token"] = this.token;
      return data;
    }
  }

  export interface IUserLoginModel {
    details: string;
    loginResult: number;
    token: string;
  }

  export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any }, result: any) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
      return obj.isApiException === true;
    }
  }

  function throwException(message: string, status: number, response: string, headers: { [key: string]: any }, result?: any): any {
    if (result !== null && result !== undefined) throw result;
    else throw new ApiException(message, status, response, headers, null);
  }

  function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
  }
}
